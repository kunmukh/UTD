# Name: Kunal Mukherjee
# Personal email: kunmukh@GMAIL.COM
# Date: 10/8/20
# File name: 
# Project name: spiltbrain

# Qi ref: https://docs.google.com/document/d/1catIto7upO3jbd_F7ioFYQICxRZ9SZo06DMP3TjU28c/edit

# library for psql
from os import listdir
from os.path import isfile, join
import os
import psycopg2
from datetime import datetime, date, timedelta
import csv
import pandas as pd

# start and end date
initialStartDate = date(2020, 12, 24)

# database IP and port
db_ip = "10.176.150.228" #173-anomaly #228-benign
db_port = "5432"
db_username = "provtester"
db_pass = "Syssec123"

ROW_CHECK_NUM = 5
newRow = False
newrowFlag = [1 for i in range(ROW_CHECK_NUM)]

# programs
programs = ['kodi']
output_filename = "temp-files/kodi-malware-agentID-db_mapping.csv"


# func to check if new rows have been added
def checkAllnewrowFlags():
    global newrowFlag

    for i in newrowFlag:
        if i == 1:
            return True

    return False


# write data to csv
def writeDATAtoCSV(rowData):

    global newRow

    # need to convert everything to str for csv
    for i, data in enumerate(rowData):
        if not isinstance(data, str):
            rowData[i] = str(data)

    # name of csv file
    fields = ['Platform', 'AgentID', 'Program', 'database-name']

    with open(output_filename, 'a+', newline='') as csvfileWrite, \
            open(output_filename, 'r+', newline='') as csvfileRead:
        reader = csv.reader(csvfileRead)

        if rowData not in reader:
            newRow = True

            writer = csv.DictWriter(csvfileWrite, fieldnames=fields)

            writer.writerow({'Platform': rowData[0],
                             'AgentID': rowData[1],
                             'Program': rowData[2],
                             'database-name': rowData[3]})

            print("Platform: {} AgentID: {} Program: {} DBname: {}".format(rowData[0],rowData[1],rowData[2],rowData[3]))
        else:
            newRow = False


# get all the current database names
def getAllDatabaseQuery(startDate_str):
    try:
        connection = psycopg2.connect(user = db_username,
                                      password = db_pass,
                                      host = db_ip,
                                      port = db_port,
                                      database = "eventdb_" + startDate_str)

        cursor = connection.cursor()

        cursor.execute("select datname from pg_database")
        rows = cursor.fetchall()

        # get all the database names
        return [row[0] for row in rows]

    except psycopg2.Error as error:
        print("Error while fetching data from PostgreSQL", error)

    finally:
        # closing database connection.
        if (connection):
            cursor.close()
            connection.close()
            '''print("PostgreSQL connection is closed")'''


# get the agentid from the DB for the malware hash and db provided
def databaseQuery(DB_str, program, platform):
    global newrowFlag

    try:
        connection = psycopg2.connect(user=db_username,
                                      password=db_pass,
                                      host=db_ip,
                                      port=db_port,
                                      database=DB_str)

        cursor = connection.cursor()

        postgreSQL_select_Query = "select distinct agentid, cmd from processlet where exe_name like " + "'%" \
                                  + program + "%'"

        cursor.execute(postgreSQL_select_Query)
        records = cursor.fetchall()

        # if records is empty
        if not records:
            print("No records found")

        # get the database record that we want
        for i, row in enumerate(records):
            writeDATAtoCSV([platform, row[0], program, DB_str])

            if i < ROW_CHECK_NUM:
                if not newRow:
                    newrowFlag[i] = 0
                    if not checkAllnewrowFlags():
                        break
                else:
                    newrowFlag[i] = 1

    except psycopg2.Error as error:
        print("Error while fetching data", error, " ", program, " ", platform, " ", DB_str)

    finally:
        try:
            # closing database connection.
            if (connection):
                cursor.close()
                connection.close()
                '''print("PostgreSQL connection is closed")'''
        except UnboundLocalError:
            print("Error connection not established")


def main():
    
    global newrowFlag

    startDate = initialStartDate
    DB = getAllDatabaseQuery(startDate.strftime('%Y_%m_%d'))
    allDB = [d for d in DB if "eventdb_" in d ] # only select the eventdb and "eventdb_2020" not in d

    # remove db from allDB -> that is in .csv
    if isfile(output_filename):
        # get the databases already queried
        df = pd.read_csv(output_filename)
        df_db = df.iloc[:, [3]].to_numpy()

        queriedDB_list = [d[0] for d in df_db]
        allDB = [d for d in allDB if d not in queriedDB_list]

    for db in allDB:

        # for all unknown SHA run the query
        for i, program in enumerate(programs):
            newrowFlag = [1 for i in range(ROW_CHECK_NUM)]
            
            print(i, "|", len(programs), " ", db, " matching with unknown")
            databaseQuery(db, program, "unknown")

    # use the malware names to query the database and get agentID
    print("CSV file complete")

    # use the csv to query the db and form the tsv -> malwareDB-query.py


if __name__ == '__main__':
    main()

