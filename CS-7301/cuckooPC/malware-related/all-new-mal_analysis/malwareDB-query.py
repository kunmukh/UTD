# Name: Kunal Mukherjee
# Personal email: kunmukh@GMAIL.COM
# Date: 10/28/20
# File name: 
# Project name: splitbrain

# Qi ref: https://docs.google.com/document/d/1catIto7upO3jbd_F7ioFYQICxRZ9SZo06DMP3TjU28c/edit

# library for psql
import psycopg2
import csv
import pandas as pd
from os.path import isfile

# database IP and port
db_ip = "10.176.150.173"
db_port = "5432"
db_username = "provtester"
db_pass = "Syssec123"

ROW_CHECK_NUM = 5
newRow = False
newrowFlag = [1 for i in range(ROW_CHECK_NUM)]

output_filename = "temp-files/backtracker-input.csv"

def checkAllnewrowFlags():
    global newrowFlag

    for i in newrowFlag:
        if i == 1:
            return True

    return False


def writeDATAtoCSV(rowData):

    global newRow

    for i, data in enumerate(rowData):
        if not isinstance(data, str):
            rowData[i] = str(data)

    # name of csv file
    fields = ['id', 'agentid', 'database_name', 'malware']

    with open(output_filename, 'a+', newline='') as csvfileWrite, \
            open(output_filename, 'r+', newline='') as csvfileRead:
        reader = csv.reader(csvfileRead)

        if rowData not in reader:
            newRow = True
            writer = csv.DictWriter(csvfileWrite, fieldnames=fields)

            writer.writerow({'id': rowData[0],
                             'agentid': rowData[1],
                             'database_name': rowData[2],
                             'malware': rowData[3]})
            print("id:{} DBname:{} AgentID:{} malware:{}".format(rowData[0], rowData[1], rowData[2], rowData[3]))
        else:
            newRow = False


def databaseQuery(DB_str, malware_sha):
    global newrowFlag

    try:
        connection = psycopg2.connect(user=db_username,
                                      password=db_pass,
                                      host=db_ip,
                                      port=db_port,
                                      database=DB_str)

        cursor = connection.cursor()

        postgreSQL_select_Query = "select id, agentid from processletevent where optype='Start_Processlet' " \
                                  "and srcid in (select id from processlet where exe_name like" + "'%" \
                                  + malware_sha + "%')"

        cursor.execute(postgreSQL_select_Query)
        records = cursor.fetchall()

        # get the database record that we want
        for i, row in enumerate(records):
            writeDATAtoCSV([row[0], DB_str, row[1], "malware"])

            if i < ROW_CHECK_NUM:
                if not newRow:
                    newrowFlag[i] = 0
                    if not checkAllnewrowFlags():
                        break
                else:
                    newrowFlag[i] = 1

    except (Exception, psycopg2.Error) as error:
        print("Error while fetching data from PostgreSQL", error, " ", malware_sha)

    finally:
        try:
            # closing database connection.
            if (connection):
                cursor.close()
                connection.close()
                '''print("PostgreSQL connection is closed")'''
        except UnboundLocalError:
            print("Error connection not established")


def main():

    global newrowFlag

    # the mlaware_executed array
    malware_mapping_Arr = []
    with open("temp-files/malware-agentID-db_mapping.csv") as csvfile:
        reader = csv.reader(csvfile)
        for row in reader:
            malware_mapping_Arr.append(row)

    # remove db from allDB -> that is in .csv
    if isfile(output_filename):
        # get the databases already queried
        df = pd.read_csv(output_filename)

        df_db = df.iloc[:, [1]].to_numpy()
        queriedDB_list = [d[0] for d in df_db]

        malware_mapping_df = pd.DataFrame(malware_mapping_Arr)

        for date in queriedDB_list:
            malware_mapping_df = malware_mapping_df.loc[malware_mapping_df[3] != date]

        tmp_malware_mapping_Arr = malware_mapping_df.to_numpy()
        malware_mapping_Arr = [list(d) for d in tmp_malware_mapping_Arr]

    # query the db to create the backtracker input file
    for i, x in enumerate(malware_mapping_Arr):
        newrowFlag = [1 for i in range(ROW_CHECK_NUM)]
        print(i, "/", len(malware_mapping_Arr), x[3], x[2])
        databaseQuery(x[3], x[2])

    # convert the csv -> tsv
    with open('temp-files/backtracker-input.csv', 'r') as csvin, \
    open('temp-files/backtracker-input.tsv', 'w') as tsvout:
        csvin = csv.reader(csvin)
        tsvout = csv.writer(tsvout, delimiter='\t')

        for row in csvin:
            tsvout.writerow(row)

    # Backtracker run and get result -> result2malwarehash.py
    # Backtracker use fileless-backtracker-input.tsv as the input file
    '''
    $ jdk1.8.0_261/bin/java -jar Backtracker.jar
    -batch_input=($pwd)/backtracker-input.tsv
    -batch_output=($pwd)/results
    -timeout 200 -forward_timeout 200 -maxlen 6 -forwardmaxlen 6
    -mapdb /home/vboxserv/Documents/qi-malware-stats/qi-new/Backtracker-Qi/mapdb/
    -stability_model /home/vboxserv/Documents/qi-malware-stats/qi-new/Backtracker-Qi/stability_map/
    '''


if __name__ == '__main__':
    main()