# Name: Kunal Mukherjee
# Personal email: kunmukh@GMAIL.COM
# Date: 12/22/20
# File name: 
# Project name: splitbrain

# import
from os import listdir
from os.path import isfile, join
import os
import logging
import subprocess
import re
import sys
import csv
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime

# logging setting
logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)

results_path = 'results/'

# function to get all the SHA values
malware_file = ["malware-list/"+f for f in listdir("malware-list")
                if isfile(join("malware-list/", f)) and f != '.DS_Store']

# malware array name
Intel_shaArr = set()
AMD_shaArr = set()
ARM32_shaArr = set()
ARM64_shaArr = set()
MIPS_shaArr = set()
PowerPC_shaArr = set()
other_shaArr = set()

fields = ['date', 'agentid', 'cmd', 'malwareSHA', 'nodes', 'edges', 'connected_components']

noto_malwares = set()


# get all the SHA from the file
def getSHAfromFile():

    print(malware_file)

    for file in malware_file:
        f = open(file, "r")

        for x in f:
            x = x.strip('\n')

            print(x, len(x))

            if len(x) != 64:
                if x.split("	")[1] == 'Intel 80386':
                    Intel_shaArr.add(x.split("	")[0])
                elif x.split("	")[1] == 'AMD x86-64' :
                    AMD_shaArr.add(x.split("	")[0])
                elif x.split("	")[1] == 'ARM 32-bit':
                    ARM32_shaArr.add(x.split("	")[0])
                elif x.split("	")[1] == 'ARM 64-bit':
                    ARM64_shaArr.add(x.split("	")[0])
                elif x.split("	")[1] == 'MIPS I':
                    MIPS_shaArr.add(x.split("	")[0])
                elif x.split("	")[1] == 'PowerPC':
                    PowerPC_shaArr.add(x.split("	")[0])
            else:
                other_shaArr.add(x)

    print('Total # of malwares: ', len(Intel_shaArr) + len(AMD_shaArr) +
          len(ARM32_shaArr) + len(ARM64_shaArr) +
          len(MIPS_shaArr) + len(PowerPC_shaArr) + len(other_shaArr))
    print('Intel: ', len(Intel_shaArr))
    print('AMD x86: ', len(AMD_shaArr))
    print('ARM 32-bit: ', len(ARM32_shaArr))
    print('ARM 64-bit: ', len(ARM64_shaArr))
    print('MIPS: ', len(MIPS_shaArr))
    print('POWERPC: ', len(PowerPC_shaArr))
    print('Other: ', len(other_shaArr))


# create the pre-processed data file 'temp-files/proc_malware-analytics.csv'
def createAnalyticsCSV(csvFilePath):

    # get all the dir in results
    list_dir_result = listdir(results_path)
    list_dir_result = [dir for dir in list_dir_result if dir != ".DS_Store"]
    print("list of directories:", list_dir_result)

    # do it for all the .call files in all the dir
    for command in list_dir_result:
        # open files .call and get malware
        for file in os.listdir(results_path + command):
            if file.endswith(".call"):

                # get the date and agentID
                try:
                    date = re.search(r'[0-9][0-9][0-9][0-9]_[0-9][0-9]_[0-9][0-9]_[0-9]', file).group()
                    # get the agentID
                    agentID = file[file.find(date) + 12:file.find(".call")]
                except:
                    date = re.search(r'[0-9][0-9][0-9][0-9]_[0-9][0-9]_[0-9][0-9]', file).group()
                    # get the agentID
                    agentID = file[file.find(date) + 10:file.find(".call")]

                if agentID[1] == "-":
                    agentID = agentID[1:]

                # get the graph components
                out = subprocess.Popen(['/usr/local/bin/gc', file],
                                       cwd=results_path + command,
                                       stdout=subprocess.PIPE,
                                       stderr=subprocess.STDOUT)
                stdout, stderr = out.communicate()

                nodes = int(stdout.split()[0])
                edges = int(stdout.split()[1])
                connected_comp = stdout.split()[2].decode("utf-8")

                with open(results_path + command + "/" + file, "r") as fr, \
                        open(csvFilePath, "a+", newline='') as csvfile:

                    writer = csv.DictWriter(csvfile, fieldnames=fields)

                    for line in fr:
                        if "vt_kunal" in line:
                            # string matching a pattern 12 continous alph-numeric string
                            try:
                                sha = re.search(r'[a-z0-9][a-z0-9][a-z0-9][a-z0-9]'
                                                r'[a-z0-9][a-z0-9][a-z0-9][a-z0-9]'
                                                r'[a-z0-9][a-z0-9][a-z0-9][a-z0-9]'
                                                r'[a-z0-9][a-z0-9][a-z0-9][a-z0-9]', line).group()
                            except AttributeError:
                                # malware not found
                                sha = ""

                            for whole_sha in Intel_shaArr + AMD_shaArr + ARM32_shaArr + other_shaArr:
                                if sha in whole_sha:
                                    print(date, agentID, command, whole_sha, nodes, edges, connected_comp)

                                    writer.writerow({'date': date,
                                                     'agentid': agentID,
                                                     'cmd': command,
                                                     'malwareSHA': whole_sha,
                                                     'nodes': nodes,
                                                     'edges': edges,
                                                     'connected_components': connected_comp})


# process the analytics file created
def processAnalyticsCSV(fname):
    # read the malware analytics and drop the duplicates
    df = pd.read_csv(fname)
    df = df.drop_duplicates(keep="first", inplace=False)

    # per malware
    # get all the available malware
    df = df.sort_values(by=['nodes'], ascending=False)
    malwares = df['malwareSHA'].tolist()

    for mal in malwares:
        noto_malwares.add(mal)

    with open('temp-files/noto-malware-hash_'+datetime.today().strftime('%Y-%m-%d')+'.txt', 'a+') as f:
        for mal in noto_malwares:
            f.write(mal+"\n")
        f.close()


def main():

    getSHAfromFile()

    # part 1
    # write to file
    with open('temp-files/malware-analytics_'+datetime.today().strftime('%Y-%m-%d')+'.csv', 'a+') as f:
        f.write("date,agentid,cmd,malwareSHA,nodes,edges,connected_components" + "\n")
        f.close()

    createAnalyticsCSV('temp-files/malware-analytics_'+datetime.today().strftime('%Y-%m-%d')+'.csv')

    # part2
    processAnalyticsCSV('temp-files/malware-analytics_'+datetime.today().strftime('%Y-%m-%d')+'.csv')

    print('temp-files/malware-analytics_'+datetime.today().strftime('%Y-%m-%d')+'.csv'+' file created')


if __name__ == '__main__':
    main()
