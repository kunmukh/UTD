# Name: Kunal Mukherjee
# Personal email: kunmukh@GMAIL.COM
# Date: 2/12/21
# File name:
# Project name:

# to run
'''
tracker.py refdb -c asi-sv2 -r /data/kunal/tracker-graphs/refdb
tracker.py forward -c asi-sv2 -d eventdb_2020_12_28 -p 975289 -r /data/kunal/tracker-graphs/refdb -o /graphs/anomaly-graphs
python3 run-tracker.py
'''

# header files
import pandas as pd
import os
import numpy as np
import sys, getopt

a_C = "asi-sv2"
a_input_db_file = "temp-files/anomaly-kodi-backtracker-input.csv"
a_processed_graphs = "temp-files/anomaly-processed.txt"
a_OUTPUT_PATH = "/data/kunal/tracker-graphs/graphs/anomaly-graphs/2020_16_02"


b_C = "asi-sv"
b_input_db_file = "temp-files/benign-kodi-backtracker-input.csv"
b_processed_graphs = "temp-files/benign-processed.txt"
b_OUTPUT_PATH = "/data/kunal/tracker-graphs/graphs/benign-graphs/2020_16_02"


input_fields = ['id', 'database_name', 'agentid', 'program']

REF_DB_PATH = "/data/kunal/tracker-graphs/refdb"
PYTHON_HEADER_FORWARD = "tracker.py forward"
PYTHON_HEADER_BACKWARD = "tracker.py backward"
C = ""
OUTPUT_PATH = ""
PROCESSED = ""


def runCommand(DB, PROCESSLETEVENTIDS_str):
    command_str = PYTHON_HEADER_FORWARD + \
                  " -c " + C + \
                  " -d " + DB + \
                  " -p " + PROCESSLETEVENTIDS_str + \
                  " -r " + REF_DB_PATH + \
                  " -o " + OUTPUT_PATH

    # a method of not cumputing redundant
    new_str = True

    with open(PROCESSED, 'r+', newline='') as rfile, \
            open(PROCESSED, 'a+', newline='') as wfile:

        for line in rfile.readlines():
            if line.rstrip() == command_str:
                new_str = False
                break

        # if new command then run
        if new_str:
            print(command_str)
            wfile.write(command_str + "\n")
            os.system(command_str)

    #exit()


def getChoice(argv):
    choice = ""

    try:
        opts, args = getopt.getopt(argv, "hc:", ["choice="])
    except getopt.GetoptError:
        print('python3 run-tracker.py -c <anomaly/benign>')
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print('python3 run-tracker.py -c <anomaly/benign>')
            sys.exit()
        elif opt in ("-c", "--choice"):
            choice = arg
    print("Choice: {}".format(choice))

    return choice


def main(argv):
    global C, OUTPUT_PATH, PROCESSED

    choice = getChoice(argv)

    if choice == 'anomaly':
        C = a_C
        OUTPUT_PATH = a_OUTPUT_PATH
        input_db_file = a_input_db_file
        PROCESSED = a_processed_graphs
    else:
        C = b_C
        OUTPUT_PATH = b_OUTPUT_PATH
        input_db_file = b_input_db_file
        PROCESSED = b_processed_graphs

    df = pd.read_csv(input_db_file, names=input_fields)

    # get unique agaentid
    agentids = df['agentid'].unique()

    # get the agentid
    for indx, agentid in enumerate(agentids):
        selectedRows = df.loc[df['agentid'] == agentid][['id', 'database_name']]

        # select the date
        dbs = selectedRows['database_name'].unique()

        for db in dbs:
            # select the processleteventids
            processleteventids = pd.DataFrame(selectedRows.loc[selectedRows['database_name'] == db]['id'],
                                              columns=['id'])
            print("agentid: {} dbs: {}".format(agentid, db))
            print("{}".format(processleteventids))

            # some way to select events
            processleteventids_arr = np.array(processleteventids['id'].sort_values())

            last_pid = processleteventids_arr[0]

            PROCESSLETEVENTIDS_str = str(last_pid) + " "

            print("\n", processleteventids_arr[0])

            # choose eventid that are close temporally
            for i, p_id in enumerate(processleteventids_arr[1:]):

                if abs(p_id - last_pid) < 500:
                    PROCESSLETEVENTIDS_str += str(p_id) + " "
                else:
                    runCommand(db, PROCESSLETEVENTIDS_str)

                    last_pid = p_id
                    PROCESSLETEVENTIDS_str = str(last_pid) + " "

            if PROCESSLETEVENTIDS_str:
                runCommand(db, PROCESSLETEVENTIDS_str)

            # process for one db
            #exit()


if __name__ == '__main__':
    main(sys.argv[1:])
