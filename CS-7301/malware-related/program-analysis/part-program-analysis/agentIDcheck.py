# Name: Kunal Mukherjee
# Personal email: kunmukh@GMAIL.COM
# Date: 2/27/21
# File name: 
# Project name:

import logging
import psycopg2
import json
import time
import argparse
import numpy as np


# database IP and port
db_ip = ""
db_port = "5432"
db_username = "provtester"
db_pass = "Syssec123"

config = "asi-sv"
eventdb = 'eventdb_{}'.format(time.strftime('%Y_%m_%d'))

log = logging.getLogger(__name__)
log.setLevel(logging.DEBUG)

ch = logging.StreamHandler()
ch.setLevel(logging.INFO)

formatter = logging.Formatter('%(asctime)s | %(levelname)s\t| %(message)s')
ch.setFormatter(formatter)
log.addHandler(ch)


def int32(x):
  if type(x) == str:
    x = int(x, 16)

  if x>0xFFFFFFFF:
    raise OverflowError
  if x>0x7FFFFFFF:
    x=int(0x100000000-x)
    if x<2147483648:
      return -x
    else:
      return -2147483648
  return x


def getCurrAgentID():
    # print the AgentID
    with open('/opt/NECLA/Agent/run/agent-rt.json', 'r+') as fo:
        data = json.load(fo)
        agentID = data['AgentID']
    log.info("Kunal: Current NEC-Agent ID %s" % (agentID))
    log.info("Kunal: Current NEC-Agent ID %d" % (int32(str(agentID[-8:]))))

    exit(0)


def databaseQuery(DB_str, agentID):

    try:
        connection = psycopg2.connect(user=db_username,
                                      password=db_pass,
                                      host=db_ip,
                                      port=db_port,
                                      database=DB_str)

        cursor = connection.cursor()

        postgreSQL_select_Query = "select * from processlet where " \
                                  "agentid="+agentID

        cursor.execute(postgreSQL_select_Query)
        records = cursor.fetchall()

        # if records is empty
        if not records:
            log.info("No records found")
            return False

        # get the database record that we want
        log.info("Last 5 transactions")
        log.info(np.array(records[-5:]))
        log.info("\n\n")
        return True

    except psycopg2.Error as error:
        log.info("Error while fetching data", error, " ", DB_str)

    finally:
        try:
            # closing database connection.
            if (connection):
                cursor.close()
                connection.close()
                '''print("PostgreSQL connection is closed")'''
        except UnboundLocalError:
            log.info("Error connection not established")


def checkDB(config, eventdb, agentID):
    global db_ip

    if db_ip == "":
        if config == "asi-sv":
            db_ip = "10.176.150.228"  # 173-anomaly #228-benign
        else:
            db_ip = "10.176.150.173"

    log.info("Checking ASI-System:{} eventdb:{}".format(config, eventdb))

    if databaseQuery(eventdb, agentID):
        log.info("AgentID found in db:{}".format(eventdb))
    else:
        log.info("AgentID not registered currently")


def getChoice():
    global db_ip

    _today = 'eventdb_{}'.format(time.strftime('%Y_%m_%d'))

    parser = argparse.ArgumentParser(
        description='Runner script for agentid check')

    cmd_parser = parser.add_subparsers(title="command", dest="service_command")

    renew_agent_parser = cmd_parser.add_parser(name="check_agentid",
                                               help="check agentid")
    curr_agent_parser = cmd_parser.add_parser(name="curr_agentid",
                                               help="get current agentid")

    for psr in [renew_agent_parser]:
        psr.add_argument("-c", '--config', type=str, default="asi-sv2",
                         choices=['asi-sv', 'asi-sv2'],
                         help='Configuration for database profile.',
                         required=True)
        psr.add_argument("-d", '--eventdb', type=str,
                         default='{}'.format(_today),
                         help='eventdb (default: {})'.format(_today),
                         required=True)
        psr.add_argument("-a", '--agentID', type=str,
                         default='{}'.format(1004127471),
                         help='agentID (default: {})'.format(1004127471),
                         required=True)

    ARGS = parser.parse_args()

    if ARGS.service_command in ['check_agentid']:
        db_cfg = ARGS.config
        eventdb = ARGS.eventdb
        agentID = ARGS.agentID
    elif ARGS.service_command in ['curr_agentid']:
        getCurrAgentID()
    else:
        exit(-2)

    if config == "asi-sv":
        db_ip = "10.176.150.228"  # 173-anomaly #228-benign
    else:
        db_ip = "10.176.150.173"

    log.info("AgentID: {} CONF: {} DB: {}".format(agentID, db_cfg, eventdb))

    return agentID, db_cfg, eventdb


def main():

    agentID, config, eventdb = getChoice()

    checkDB(config, eventdb, agentID)


if __name__ == '__main__':
    main()