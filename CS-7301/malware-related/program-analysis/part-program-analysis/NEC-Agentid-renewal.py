# Name: Kunal Mukherjee
# Personal email: kunmukh@GMAIL.COM
# Date: 2/27/21
# File name: 
# Project name:

import logging
import subprocess
import time
import argparse
import json

import agentIDcheck

_delay_time = 10

config = "asi-sv"
eventdb = 'eventdb_{}'.format(time.strftime('%Y_%m_%d'))

log = logging.getLogger(__name__)
log.setLevel(logging.DEBUG)

ch = logging.StreamHandler()
ch.setLevel(logging.INFO)

formatter = logging.Formatter('%(asctime)s | %(levelname)s\t| %(message)s')
ch.setFormatter(formatter)
log.addHandler(ch)


def int32(x):
  if type(x) == str:
    x = int(x, 16)

  if x>0xFFFFFFFF:
    raise OverflowError
  if x>0x7FFFFFFF:
    x=int(0x100000000-x)
    if x<2147483648:
      return -x
    else:
      return -2147483648
  return x


def agentIDrenew():
    # sync the time first
    process = subprocess.Popen(['sudo', 'systemctl', 'stop', 'ntp'],
                               stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE)
    time.sleep(_delay_time)
    process = subprocess.Popen(['sudo', 'ntpd', '-gq'],
                               stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE)
    time.sleep(_delay_time)
    process = subprocess.Popen(['sudo', 'systemctl', 'start', 'ntp'],
                               stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE)
    log.info("Kunal: Time synced")
    time.sleep(_delay_time)

    # stop the NEC-agent
    process = subprocess.Popen(['sudo', 'systemctl', 'stop', 'NEC-Agent'],
                               stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE)
    log.info("Kunal: NEC-Agent stopped")
    time.sleep(_delay_time)

    # remove the AgentID
    with open('/opt/NECLA/Agent/run/agent-rt.json', 'r+') as f:
        data = json.load(f)
        oldagentID = data['AgentID']
        data['AgentID'] = ""  # <--- add `id` value.
        f.seek(0)  # <--- should reset file position to the beginning.
        json.dump(data, f, indent=4)
        f.truncate()  # remove remaining part
        f.close()

    log.info("Kunal: Old NEC-Agent ID removed %s" % (oldagentID))
    log.info("Kunal: Old NEC-Agent ID %d" % (int32(str(oldagentID[-8:]))))
    time.sleep(_delay_time)

    # start the NEC-Agent
    process = subprocess.Popen(['sudo', 'systemctl', 'start', 'NEC-Agent'],
                               stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE)
    # log.info("Kunal: NEC-Agent started")
    time.sleep(_delay_time)

    with open('/opt/NECLA/Agent/run/agent-rt.json', 'r+') as fo:
        data = json.load(fo)
        agentID = data['AgentID']
        while agentID == "":
            log.info("Kunal: NEC-Agent issue while starting")
            time.sleep(_delay_time)

            # stop the NEC-agent
            process = subprocess.Popen(
                ['sudo', 'systemctl', 'stop', 'NEC-Agent'],
                stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            log.info("Kunal: NEC-Agent stopped")
            time.sleep(_delay_time)

            # start the NEC-Agent again
            process = subprocess.Popen(
                ['sudo', 'systemctl', 'start', 'NEC-Agent'],
                stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            time.sleep(_delay_time)

            f = open('/opt/NECLA/Agent/run/agent-rt.json', 'r')
            data = json.load(f)
            agentID = data['AgentID']
            f.close()

    log.info("Kunal: NEC-Agent started")

    # print the AgentID
    with open('/opt/NECLA/Agent/run/agent-rt.json', 'r+') as fo:
        data = json.load(fo)
        agentID = data['AgentID']
    log.info("Kunal: New NEC-Agent ID %s" % (agentID))
    log.info("Kunal: New NEC-Agent ID %d" % (int32(str(agentID[-8:]))))

    return int32(str(agentID[-8:]))


def getChoice():

    _today = 'eventdb_{}'.format(time.strftime('%Y_%m_%d'))

    parser = argparse.ArgumentParser(
        description='Runner script for re-new agentid.')

    cmd_parser = parser.add_subparsers(title="command", dest="service_command")

    renew_agent_parser = cmd_parser.add_parser(name="renew_agent",
                                               help="renew agentid")

    for psr in [renew_agent_parser]:
        psr.add_argument("-c", '--config', type=str, default="asi-sv2",
                         choices=['asi-sv', 'asi-sv2'],
                         help='Configuration for database profile.',
                         required=True)
        psr.add_argument("-d", '--eventdb', type=str,
                         default='{}'.format(_today),
                         help='eventdb (default: {})'.format(_today),
                         required=True)

    ARGS = parser.parse_args()

    if ARGS.service_command in ['renew_agent']:
        db_cfg = ARGS.config
        eventdb = ARGS.eventdb
    else:
        exit(-2)

    log.info("CONF: {} DB: {}".format(db_cfg, eventdb))

    return db_cfg, eventdb


def main():

    config, eventdb = getChoice()

    agentID = agentIDrenew()

    time.sleep(_delay_time)

    agentIDcheck.checkDB(config, eventdb, str(agentID))


if __name__ == '__main__':
    main()