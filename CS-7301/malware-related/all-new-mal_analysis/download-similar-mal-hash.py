# Name: Kunal Mukherjee
# Personal email: kunmukh@GMAIL.COM
# Date: 2/19/21
# File name: 
# Project name:

# import
import datetime
from datetime import datetime
import time
import pycurl
import json
from os import listdir
from os.path import isfile, join
import subprocess
import os
import re

# added extra
selected_mal = set()

# added extra
os.system("rm new-similar-malwares/malware-list.txt")

os.system("ls new-similar-malwares > new-similar-malwares/malware-list.txt")
os.system("ls intel >> new-similar-malwares/malware-list.txt")
os.system("ls amd >> new-similar-malwares/malware-list.txt")
os.system("ls arm/arm32 >> new-similar-malwares/malware-list.txt")
selected_mal.add('new-similar-malwares/malware-list.txt')

# download malware command
# base commands
'''
curl -v --location --output sample.bin \
  --url 'https://www.virustotal.com/vtapi/v2/file/download?apikey=&hash=fdc9110458d2d88900171f8fb51b84254fed821a23f268eac73d3cdda38ed9d6
'''

# string constants for malware download
base_url = 'https://www.virustotal.com/vtapi/v2/file/download?'
key_str = 'apikey='
kunal_key = ''
hash_str = '&hash='

# downlaod similar file command
# base commands
'''
    curl --request GET \
  --url https://www.virustotal.com/api/v3/files/9990527d78700a55d788bd4b3fcbb16b3852027ea722540a00d43544df378053/similar_files \
  --header 'x-apikey: ' | json_pp > sample.json
'''

# string constants for similar malware json download
base_url_simi = 'https://www.virustotal.com/api/v3/files/'
similar_str = '/similar_files'
similar_header = ['x-apikey: ']

# download VirusShare malware
# base commands
'''
curl https://virusshare.com/hashfiles/VirusShare_00389.md5 --output VirusShare_00389.txt 
'''

# string constants for virusshare malware download
base_url_virusshare = 'https://virusshare.com/hashfiles/'



# global var
malware_downloaded = 0
json_downloaded = 0


def downloadSimilarMal(sha, file):

    global malware_downloaded, json_downloaded

    if not isfile('similar-malware-dir/' + sha + '_similar.json'):

        json_downloaded = json_downloaded + 1

        # 1000 malwares downloaded time to break
        if malware_downloaded + json_downloaded > 998:
            exit()

        # download the similar malware json
        with open('similar-malware-dir/' + sha + '_similar.json', 'wb') as f:
            c = pycurl.Curl()
            c.setopt(c.URL, base_url_simi + sha + similar_str)
            c.setopt(c.HTTPHEADER, similar_header)
            c.setopt(c.WRITEDATA, f)
            # c.setopt(pycurl.VERBOSE, 1)
            c.setopt(pycurl.FOLLOWLOCATION, 1)
            c.perform()
            c.close()
        time.sleep(15)

        # load the data from the file
        with open('similar-malware-dir/' + sha + '_similar.json', 'r') as f:
            data = json.load(f)

        try:
            similar_malwares = [m["id"] for m in data["data"]]

            for similar_mal in similar_malwares:

                downloadMal(similar_mal, file)

        except KeyError:
            print("Error reading json:" + 'similar-malware-dir/' + sha + '_similar.json' + "\n")

            if data["error"]["code"] == "QuotaExceededError":
                print("VT Quota exceeded")
                exit()
        except json.decoder.JSONDecodeError:
            print("Error reading json:" + 'similar-malware-dir/' + sha + '_similar.json' + "\n")

    else:
        print(sha + "_similar.json already downloaded - skipping")


def downloadMal(sha, file):

    global malware_downloaded, json_downloaded

    if not isfile('new-similar-malwares/' + sha + '.bin'):

        malware_downloaded = malware_downloaded + 1

        # 1000 malwares downloaded time to break
        if malware_downloaded + json_downloaded > 998:
            exit()

        # save the new mal
        with open('malware-list/new_mal_' + str(datetime.today().strftime('%Y-%m-%d')) + '.txt',
                  "a") as f:
            f.write(sha + "\n")
            f.close()

        with open('new-similar-malwares/' + sha + '.bin', 'wb') as f:
            c = pycurl.Curl()
            c.setopt(c.URL, base_url + key_str + kunal_key + hash_str + sha)
            c.setopt(c.WRITEDATA, f)
            # c.setopt(pycurl.VERBOSE, 1)
            c.setopt(pycurl.FOLLOWLOCATION, 1)
            c.perform()
            c.close()
        time.sleep(15)

        print("{} malware downloaded".format(malware_downloaded))

        print("Downloading similar malware for mal {}".format(sha))

        downloadSimilarMal(sha, file)

    else:
        print(sha + " already downloaded - skipping")


def downloadSHAFile (str):

    global selected_mal

    if not isfile('malware-list/'+str+'.txt'):

        with open('malware-list/'+str+'.txt', 'wb') as f:
            c = pycurl.Curl()
            c.setopt(c.URL, base_url_virusshare + str + '.md5')
            c.setopt(c.WRITEDATA, f)
            # c.setopt(pycurl.VERBOSE, 1)
            c.perform()
            c.close()

        selected_mal.add('malware-list/'+str+'.txt')
    else:
        selected_mal.add('malware-list/' + str + '.txt')


def main():
    global malware_downloaded, json_downloaded

    # downlaod the file that contains the malware sha
    '''virus_share = "VirusShare_00389"
    downloadSHAFile(virus_share)'''

    # read the new malware
    for file in selected_mal:
        sel_mal_shaArr = set()

        with open(file, 'r') as f:
            for line in f:
                line = line.replace(".bin", "")
                line = line.strip('\n')

                try:
                    # added extra
                    sha = re.search(r'([a-z0-9]){64}', line).group()
                    sel_mal_shaArr.add(sha)

                except AttributeError:
                    try:
                        # added extra
                        sha = re.search(r'([a-z0-9]){32}', line).group()
                        sel_mal_shaArr.add(sha)

                    except AttributeError:
                        pass
            f.close()

        print(len(sel_mal_shaArr))

        # download the selected malware
        for i, sha in enumerate(sel_mal_shaArr):
            print('selected-malware {}/{} {}'.format(i, len(sel_mal_shaArr), sha))
            
            downloadMal(sha, file)


if __name__ == '__main__':
    main()
